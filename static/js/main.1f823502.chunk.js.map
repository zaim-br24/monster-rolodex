{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","prop","className","src","monster","id","alt","name","email","CardList","props","monsters","map","SearchBox","placeholder","handelSearchBox","type","onChange","App","state","searchField","fetch","then","resonse","json","users","setState","this","filterMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,YAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAKG,QAAQC,GAAvC,0BACHC,IAAI,YAEN,6BAAKL,EAAKG,QAAQG,OAClB,4BAAIN,EAAKG,QAAQI,aCLRC,G,MAAW,SAACC,GACvB,OACE,qBAAKR,UAAU,YAAf,SACGQ,EAAMC,SAASC,KAAI,SAACR,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,gBAAhB,OACvB,uBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6BCG,E,kDAhCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,gEAOO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAC1BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,+BAErC,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAgBjB,EAASkB,QAAO,SAACzB,GAAD,OACpCA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK5B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEY,YAAY,iBACZC,gBAAiB,SAACiB,GAAD,OACf,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAG1C,cAAC,EAAD,CAAUvB,SAAUiB,W,GA3BVO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f823502.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.style.css\";\r\nexport const Card = (prop) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      src={`https://robohash.org/${prop.monster.id}?set=set2&size=180x180`}\r\n      alt=\"monster\"\r\n    />\r\n    <h2>{prop.monster.name}</h2>\r\n    <p>{prop.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.style.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.style.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handelSearchBox }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handelSearchBox}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./component/card-list/card-list.component\";\nimport { SearchBox } from \"./component/search-box/search-box.component\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((resonse) => resonse.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonster = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>monster rolodex</h1>\n        <SearchBox\n          placeholder=\"search monster\"\n          handelSearchBox={(e) =>\n            this.setState({ searchField: e.target.value })\n          }\n        />\n        <CardList monsters={filterMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}